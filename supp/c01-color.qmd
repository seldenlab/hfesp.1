---
title: "Color"
---

```{r colorload, out.width = "100%", dpi = 300, echo=TRUE, warning=FALSE, message = FALSE}
# compare colors
library(here)
library(colordistance)
library(recolorize)
library(tidyverse)
library(vegan)
library(ape)
library(ggConvexHull)
library(wesanderson)

# get image paths
images <- colordistance::getImagePaths('out')

# generate color distance matrix
cdm <- imageClusterPipeline(images)

# replace NAs with 0
cdm[is.na(cdm)] = 0
# export color distance matrix
write.csv(cdm, file = "distance_matrix.csv")

# import qual data
hfesp.data <- read.csv('qdata.csv',
                   header = TRUE,
                   as.is = TRUE)

# import color distance matrix
c.data <- read.csv("distance_matrix.csv",
                   header = TRUE,
                   as.is = TRUE)
```

## Ordination: NMDS

```{r nmdsord, out.width = "100%", dpi = 300, echo=TRUE, warning=FALSE, message = FALSE}
nmds_scores <- scores(metaMDS(comm = as.dist(cdm)))

plot <- scores(nmds_scores) %>% 
  as_tibble(rownames = 'X') %>%
  inner_join(., hfesp.data, by = 'X')

## plot
ggplot(data = plot, aes(x = NMDS1, y = NMDS2, 
                        color = ColorGroup, fill = ColorGroup)) +
  geom_point(aes(shape = ColorGroup)) +
  geom_convexhull(alpha = 0.1) +
  scale_color_manual(values = wes_palette('Moonrise2')) +
  scale_fill_manual(values = wes_palette('Moonrise2')) +
  theme(legend.position = 'none')

# perMANOVA
bottle <- left_join(hfesp.data, c.data, by = 'X') # left join by specimen number
bottle.dist <- bottle[,6:35] # color distance matrix
set.seed(10) # make results reproducible

# model: color as a function of firing category (oxidized v. reduced)
bottle.colour <- adonis2(bottle.dist ~ ColorGroup,
                         data = bottle,
                         permutations = 10000,
                         method = 'bray')

## does color differ by firing category?
bottle.colour
```

## Visualization: Tree

```{r tree, out.width = "100%", dpi = 300, echo=TRUE, warning=FALSE, message = FALSE}
# define add_image function
add_image <- function(obj,
                      x = NULL,
                      y = NULL,
                      width = NULL,
                      interpolate = TRUE,
                      angle = 0) {
  
  # get current plotting window parameters:
  usr <- graphics::par()$usr
  pin <- graphics::par()$pin
  
  # image dimensions and scaling factor:
  imdim <- dim(obj)
  sf <- imdim[1] / imdim[2]
  
  # set the width of the image (relative to x-axis)
  w <- width / (usr[2] - usr[1]) * pin[1]
  h <- w * sf
  hu <- h / pin[2] * (usr[4] - usr[3])
  
  # plot the image
  graphics::rasterImage(image = obj,
                        xleft = x - (width / 2), xright = x + (width / 2),
                        ybottom = y - (hu / 2), ytop = y + (hu/2),
                        interpolate = interpolate,
                        angle = angle)
}

# neighbor-joining tree----
tree <- nj(as.dist(cdm))
# plot tree
plot(tree,
     show.tip.label = FALSE,
     direction = "upward")

# get parameters from plotting environment
lastPP <- get("last_plot.phylo", 
              envir = .PlotPhyloEnv)

# get xy coordinates of tips
ntip <- lastPP$Ntip

# first n values are tips/remaining values are node coordinates
xy <- data.frame(x = lastPP$xx[1:ntip],
                 y = lastPP$yy[1:ntip])

# get image names
imnames <- tools::file_path_sans_ext(basename(images))

# get tip labels
tipnames <- tree$tip.label

# check that images are in correct order:
image_order <- match(tipnames, imnames)
images <- images[image_order]

## final plot
par(mar = rep(0, 4))
plot(tree, show.tip.label = FALSE, direction = "upward")

# parameters from plotting environment
lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)

# xy coordinates of tips
ntip <- lastPP$Ntip
xy <- data.frame(x = lastPP$xx[1:ntip],
                 y = lastPP$yy[1:ntip]) 

for (i in 1:length(images)) {
  add_image(png::readPNG(images[i]),
            x = xy[i, 1],
            y = xy[i, 2], 
            width = 2)
}
```
